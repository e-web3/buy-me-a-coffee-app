import abi from '../utils/buymeacofffee.json'
import { useState, useEffect } from 'react'
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import styles from '../styles/Home.module.css'
import { ethers } from 'ethers'
export default function Home() {
  // contract Address
  const contractAddress = '0xC4cc3b5dfb9e25d92dF0760258911207B9a14a86'
  const contractABI = abi.abi
  // Component state
  const [account, setAccount] = useState('')
  const [name, setName] = useState('')
  const [message, setMessage] = useState('')
  const [memos, setMemos] = useState([])

  const onNameChange = (event) => {
    setName(event.target.value)
  }

  const onMessageChange = (event) => {
    setMessage(event.target.value)
  }

  // is Wallet Connected
  const isWalletConnected = async () => {
    try {
      const { ethereum } = window
      const accounts = await ethereum.request({ method: 'eth_accounts' })
      console.log('accounts: ', accounts)

      if (accounts.length > 0) {
        const account = accounts[0]
        console.log('wallet is connected! ' + account)
      } else {
        console.log('make sure MetaMask is connected')
      }
    } catch (err) {
      console.error(err)
    }
  }
  // Connet wallet
  const connectWallet = async () => {
    try {
      const { ethereum } = window

      if (!ethereum) {
        console.log('please install MetaMask')
      }

      const accounts = await ethereum.request({
        method: 'eth_requestAccounts',
      })

      setAccount(accounts[0])
    } catch (error) {
      console.log(error)
    }
  }

  const buyCoffee = async () => {
    try {
      const { ethereum } = window

      if (ethereum) {
        const provider = new ethers.providers.Web3Provider(ethereum, 'any')
        const signer = provider.getSigner()
        const buyMeACoffee = new ethers.Contract(
          contractAddress,
          contractABI,
          signer
        )

        console.log('buying coffee..')
        const coffeeTxn = await buyMeACoffee.buyCoffee(
          name ? name : 'anon',
          message ? message : 'Enjoy your coffee!',
          { value: ethers.utils.parseEther('0.002') }
        )

        await coffeeTxn.wait()

        console.log('mined ', coffeeTxn.hash)

        console.log('coffee purchased!')

        // Clear the form fields.
        setName('')
        setMessage('')
      }
    } catch (error) {
      console.log(error)
    }
  }

  // Function to fetch all memos stored on-chain.
  const getMemos = async () => {
    try {
      const { ethereum } = window
      if (ethereum) {
        const provider = new ethers.providers.Web3Provider(ethereum)
        const signer = provider.getSigner()
        const buyMeACoffee = new ethers.Contract(
          contractAddress,
          contractABI,
          signer
        )

        console.log('fetching memos from the blockchain..')
        const memos = await buyMeACoffee.getMemos()
        console.log('fetched!')
        setMemos(memos)
      } else {
        console.log('Metamask is not connected')
      }
    } catch (error) {
      console.log(error)
    }
  }

  useEffect(() => {
    let buyMeACoffee
    isWalletConnected()
    getMemos()

    // Create an event handler function for when someone sends
    // us a new memo.
    const onNewMemo = (from, timestamp, name, message) => {
      console.log('Memo received: ', from, timestamp, name, message)
      setMemos((prevState) => [
        ...prevState,
        {
          address: from,
          timestamp: new Date(timestamp * 1000),
          message,
          name,
        },
      ])
    }

    const { ethereum } = window

    // Listen for new memo events.
    if (ethereum) {
      const provider = new ethers.providers.Web3Provider(ethereum, 'any')
      const signer = provider.getSigner()
      buyMeACoffee = new ethers.Contract(contractAddress, contractABI, signer)

      buyMeACoffee.on('NewMemo', onNewMemo)
    }

    return () => {
      if (buyMeACoffee) {
        buyMeACoffee.off('NewMemo', onNewMemo)
      }
    }
  }, [])
  return (
    <div className={styles.container}>
      <Head>
        <title>Buy Me A Coffee</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className={styles.main}>
        {/* navbar */}
        <header className='border border-l-0 border-r-0 bg-[#1B2129] border-white/10 h-[9vh] flex items-center justify-center fixed top-0 left-0 right-0 opacity-100 z-[2000]'>
          <nav className='flex items-center justify-between w-10/12  lg:w-11/12 m-auto'>
            <Link href={`/`} passHref>
              <a className='flex items-center'>
                <Image src='/coffee.png' width={40} height={40} />
              </a>
            </Link>

            <ul className='flex items-center'>
              {account ? (
                <p className='address text-base text-blue-600 font-semibold shadow-sm cursor-pointer'>
                  {account}
                </p>
              ) : (
                <button
                  onClick={connectWallet}
                  type='button'
                  className='text-lg text-blue-500 ring-2 ring-blue-600 rounded-lg px-5 py-1.5 hover:bg-blue-600 hover:text-slate-300 transition-all active:scale-90 shadow-lg hover:shadow-blue-600 md:text-sm md:px-4 md:py-1'
                >
                  Connect Wallet
                </button>
              )}
            </ul>
          </nav>
        </header>
        {/* contract */}
        {account ? (
          <div className='rounded-lg shadow-lg p-10 bg-gradient-to-tr from-slate-50 to-slate-200'>
            <form className='space-y-2'>
              <div class='formgroup'>
                <label>Name</label>
                <br />

                <input
                  className='form-control
        block
        w-full
        px-3
        py-1.5
        text-base
        font-normal
        text-gray-700
        bg-transparent bg-clip-padding
        border border-solid border-gray-300
        rounded
        transition
        ease-in-out
        m-0
        focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none'
                  id='name'
                  type='text'
                  placeholder='Your Name'
                  onChange={onNameChange}
                />
              </div>
              <br />
              <div class='formgroup'>
                <label>Send a message</label>
                <br />

                <textarea
                  rows={3}
                  placeholder='Enjoy your coffee!'
                  id='message'
                  className='form-control
        block
        w-full
        px-3
        py-1.5
        text-base
        font-normal
        text-gray-700
        bg-transparent bg-clip-padding
        border border-solid border-gray-300
        rounded
        transition
        ease-in-out
        m-0
        focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none'
                  onChange={onMessageChange}
                  required
                ></textarea>
              </div>
              <div>
                <button
                  className='inline-block px-6 py-2 border-2 border-blue-600 text-blue-600 font-medium text-xs leading-tight uppercase rounded hover:bg-black hover:bg-opacity-5 focus:outline-none focus:ring-0 transition duration-150 ease-in-out'
                  type='button'
                  onClick={buyCoffee}
                >
                  Buy Cofee for 0.002ETH
                </button>
              </div>
            </form>
          </div>
        ) : (
          <div className='md:w-1/2 w-full flex flex-col justify-center items-center'>
            <h1 className='text-gray-900 text-4xl my-2 font-bold'>
              Buy Me A Coffe
            </h1>
            <h3 className='text-gray-600 font-bold text-2xl'>
              Give your audience an easy way to say thanks.
            </h3>
            <p className='font-medium text-center'>
              Buy Me a Coffee makes supporting fun and easy. In just a couple of
              taps, your fans can make the payment (buy you a coffee) and leave
              a message. They donâ€™t even have to create an account!
            </p>
          </div>
        )}

        {account && (
          <h1 className='text-gray-900 text-base text-center'>
            Memos received
          </h1>
        )}

        {account &&
          memos.map((memo, idx) => {
            return (
              <div
                key={idx}
                className='text-base text-left rounded-md p-5 shadow-lg hover:bg-slate-400 cursor-pointer flex justify-center items-center flex-col'
              >
                <p className='text-base text-gray-700 font-medium'>
                  {memo.message}
                </p>
                <p className='text-base text-gray-800'>
                  From: {memo.name} at {memo.timestamp.toString()}
                </p>
              </div>
            )
          })}
      </main>

      <footer className='border border-l-0 border-r-0 bg-[#1B2129] border-white/10  flex items-center justify-center fixed bottom-0 left-0 right-0 py-2 opacity-100 z-[2000]'>
        <div className='flex items-center justify-center w-11/12 m-auto text-center'>
          <p className='text-sm font-medium text-gray-300'>
            Copyright &copy; 2022 All Reserved Rights{' '}
            <span className='text-cyan-600'>tal7aouy</span>
          </p>
        </div>
      </footer>
    </div>
  )
}
